# 配置文件采用YAML语法，可以多个文档集中在一个文件里，也可以分散在多个文件中。

# 转换代码说明：
# 配置文档必须有 type 和 CPU(name) 属性，2个属性都相同的配置文档只能有一个
# 目前只实现了7种类型文档——CPU文档加6种功能文档，由type属性值指示，大小写无关：
#   - CPU          指示该CPU下共用的信息
#                  比如输出文件夹，共用的符号和包含等
#   - AI           模拟量转换
#   - PI           脉冲量转换
#   - SC           串行轮询，用在RS232 RS422 RS485通信中
#                  (功能包括了 modbus RTU 轮询，故类型值也可以为 modbusRTU)
#   - modbusTCP    modbus TCP 轮询，类型名称也可以用 MT
#   - Valve        阀门控制
#   - Motor        电机控制
# 本文件示例了以上的文档
#
# 每种文档都可选的属性为：
#   options     选项，比如 options.output_file 中改变输出文件名
#   symbols     符号定义，是多个符号的数组
#               具体见本例在CPU文档中的注释
#   includes    附加代码，会合并到SCL开始处
#               值为字符串时为SCL代码，直接合并
#               值为数组时为包含文件列表，会提取文件内容后合并
#               代码和外部文件只能采用其中一种
#               由于在YAML中书写SCL代码有很多局限，推荐用外部文件的方式
# 6个功能文档都可选的属性为：
#   list                  指示该PLC功能的列表
#   loop_additional_code  附加代码，输出在主循环函数体内结尾处
#                         值为字符串时为SCL代码，直接合并
#                         值为数组时为包含文件列表，会提取文件内容后合并

--- # CPU文档开始
# type: CPU 指示这是一个CPU空间，所有属于这个名称下的配置文档都共用相同的配置
# 输出至相同的代码文件夹中
# 代码里在同一PLC资源下分配，程序自动合并符号表
# 同一个CPU会有多种程序，比如AI、SC、modbusTCP，需要要其它文档中定义
type: CPU 

# 配置名称，指示属于哪个PLC系统，属性名称也可以用CPU
# 其它文档如指示相同的name，生成的代码会检查资源冲突情况，避免占用同一DB块、同一连接等
# name 同时作为默认输出文件夹名称，可在 output_dir 中指定为其它输出文件夹
name: AS1 # 用 CPU: AS1 效果一样

# 额外包含代码
# 数组值指示一组外部文件，文件内容将合并输出在 common.SCL 文件中
# includes的内容需要用户自己写，生成程序不检查其中的错误。
includes: 
  - JSFlow.SCL  # 该文件包含 JS_flow 符号的定义与FB实现
                # JS_flow 定义了流量接收DB块的数据结构，用于一诺的智能流量表。
                # 可参照这个文件写其它接收块函数。

# 符号定义
# 每类功能文档都内置了一些函数，它们有默认的内置符号，这些符号通常不需配置里设置
# 但如果存在地址冲突，可以在 symbols 属性下重写内置符号以更改地址和注释，名称不可变
# 一般情况下，如果不是为了重地址的原因，不必更改内置符号
# 所有FB、FC、UDT块的类型一定是它自身，所以这两种块的type可以省略
# 注意，符号只能定义一次，如果要使用同一个符号，应当用符号名称去引用
symbols:  # CPU文档下定义其它文档需要共享的符号
  # 每个符号是一个 [名称, 地址, 类型, 注释] 的数组
  - [vw1, MW1000] # 测试MW
  - [vd1, Md1000, Real] # 测试同地址 MD
  - [auto_data1, mw+] # 测试自动地址
  - [auto_data2, M+]
  - [auto_data3, M+]
  - [auto_data4, M+]
  - [auto_data5, MD+, dint]

options : # 选项，非必需，无需要时可以全部删除或注释掉。
  # 输出文件夹，默认为 <name>
  # output_dir : 'other_folder' 

  # 输出文件名，系统自动加后缀。默认输出文件是 symbols.asc common.scl
  # output_file : 'example'

# IP地址，目前用不上
IP: [192, 168, 10, 10]

... #文档结束

--- # AI文档开始
# 指示本配置为生成 AI 代码
type: AI
CPU: AS1

# 额外代码
# 字符串形式指示直接SCL代码，内容将合并输出在 AI_Loop.SCL 文件中
# includes的内容需要用户自己写，生成程序不检查其中的错误。
includes: |
  DATA_BLOCK "RecvDB"
  STRUCT
    Tank1 : WORD;
  END_STRUCT;
  BEGIN
    Tank1 := W#16#02D0;
  END_DATA_BLOCK

symbols: 
  # AI文档已有2个内置符号，其内容由本程序自动生成：
  # - [AI_Proc, FB512]  模拟量主处理函数
  # - [AI_Loop, FC512]  主循环调用FC，将这个加入OB1中
  # 可以在对上述内置符号的地址进行更改，只要重新定义就可以了，注意保持名称一致
  - [AI_Proc, FB600] # 可省略，修改内置AI_Proc地址
  - [AI_Loop, FC600] # 可省略，当名称为AI_Loop，指示这是AI主调用FC块，这个要加入到OB中

list: # 模拟量列表
  - &tubepress # 设置引用锚点，该锚点表示 & 符号左侧的项目（- 或 key）指定的内容（即右侧的value）可以被引用
    comment: 进站压力
    DB: [PIT001,  DB100] # AI数据块，没有该项则忽略转换，只输出 comment
    input: [AI01-01, PIW512] # AI通道
    zero: "-0.2" # 以下都为初始值，即不会在运行时赋值
    span: "2.6"
    AH_limit: "2.5"
    WH_limit: "2.0"
    WL_limit: "-0.05"
    AL_limit: "-0.1"
  - <<: *tubepress # 语法"<<:" 表示将锚点tubepress的内容合并在这里
    comment: 来油压力 # 可以对合并内容的部分属性进行更改
    DB: [PIT002, DB+] 
    input: [AI01-02, PIW514] 
    AL_limit: ~ # 引用对象无法删除某个属性，只能将其该属性设置为null
  - comment: 进站温度
    DB: [TIT001, DB+] 
    input: [AI01-03, PIW516] # AI通道
    zero: "-40.0"
    span: "80.0"
  - comment: 气温
    DB: [TIT002, DB+]
    input: [M485-1, MW100] # M区域
    enable_alarm: TRUE # 初始值取消报警
  - comment: 液位
    DB: [LIT001, DB+]
    input: '"RecvDB".Tank1' # 纯字符串时为引用，引用非符号名称时，转换程序不检查正确性

options : # 选项，非必需，无需要时可以全部删除或注释掉。
  # 输出文件名，系统自动加后缀。
  # output_file : 'example'

...

---
type: PI # 指示是FM350计数
name: AS1

symbols:
  # 系统已有4个内置符号：
  # - [PI_Proc, FB350]    FM350-2 的modbus计数与测量处理主FB
  # - [PI_Loop, FC350]    表示主循环调用FC，将这个加入OB1中
  # - [FM350-2, UDT350]   FM350-2 模块专用数据类型
  # 可以在对上述内置符号的地址进行更改，只要重新定义就可以了，注意保持名称一致

list : # FM350-2 模块列表
  - comment: 模块1
    # type: FM350-2 # 目前只支持350-2模块
    module_addr: 992
    count_DB: [PI01_CNT, DB31] # 专用计数块
    DB: [PI01, DB+] # 背景块，存放最终结果
  - comment: 模块2
    type: FM350-2 # 目前只支持350-2模块
    module_addr: 1008
    count_DB: [PI02_CNT, DB+] # 专用计数块
    DB: [PI02, DB+] # 背景块，存放最终结果
...

---
type: SC # 指示是CP340或CP341通信, 也可以用值 MB modbusRTU
name: AS1

includes: 
  - A101.SCL # 该文件包含 A101L 符号的FB实现
  - ZYGasFlow.SCL # 该文件包含 ZY_GAS_flow 符号的FB实现
  - TankDB.SCL # AI_Alarm代码

symbols:
  # 系统已有4个内置符号：
  # - [CP340_Poll, FB340] CP340通信主处理函数
  # - [CP341_Poll, FB341] CP341通信主处理函数
  # - [CP_Loop, FC345]      表示主循环调用FC，将这个加入OB1中
  # - [CP_polls_DB, DB880]  将用于保存轮询命令数据
  # 可以在对上述内置符号的地址进行更改，只要重新定义就可以了，注意保持名称一致

  # 以下为自定义符号，这里是接收块
  # 建议所有的接收块都用FB定义结构，不仅减少接收块的定义工作量，还能在FB中方便地对接收后的数据进一步处理和转换。
  # 转换程序能对接收块是FB背景块的情况自动生成FB调用代码，注意接收FB不要有参数！
  # 这类FB不通用，需要另外单独写块本身。
  # 可通过指定includes，系统自动添加对应代码进 CP_Loop.scl 中。建议将所有FB块的定义文件放入includes中
  - [A101L, FB802]
  - [ZY_GAS_flow, FB803]

list : # CP 模块列表
  - comment: CP01 Module736 储罐液位
    type: CP340
    coutomTrigger: TRUE # 指示由外部定义发送时间
    REQ: M0.5 # 指定时间存储器 1HZ 发送轮询
    module_addr: 736
    DB: [CP01, DB881]
    polls_name: polls_GAS
    polls:
      - comment: '液位'
        send_data: 31 31 30 30 0D 
        recv_DB: [tankLitre, DB20, A101L]
        recv_start: 0
  - comment: CP02 Module752 河口来油流量与天然气流量
    type: CP341
    module_addr: 752
    DB: [CP02, DB882]
    polls_name: polls_HK
    polls:
      - comment: 河口1#流量计 30
        deivce_ID: 30 
        function: 4 
        started_addr: 0 
        length: 28 
        CRC: F3AC # 用2字节16进制字符串表示
        recv_DB: [Flow30,  DB830, JS_flow]
        recv_start: 0
      - comment: 天然气3#流量计 # 非modbus发送，不要有deivce_ID属性，直接在send_data属性上写16进制发送数据
        send_data: 3 3 0 0 18 8E 5D
        recv_DB: GAS # 接收块，引用GAS符号
        recv_start: 20 # 要注意开始地址不一样
      - comment: 天然气总 10# 
        deivce_ID: 10 
        function: 3 
        started_addr: 0 
        length: 12
        CRC: "44B4" 
        recv_DB: [GAS, DB841, ZY_GAS_flow] # GAS符号的定义处，可在定义前后任何位置引用。
        recv_start: 40

# 额外代码，合并到CP_Loop FC块结尾
loop_additional_code: 
  - TankChain.SCL # 连锁逻辑的代码
...


# modbusTCP 文档
---
# 指示本配置为生成 modbusTCP 代码
type: modbusTCP # 也可以写为 "type: MT"

# 指示属于哪一个CPU
CPU: AS1

# 符号定义
symbols:
  # 系统已有3个内置符号，其内容自动生成：
  # - [MT_Poll, FB344]      modbusTCP通信主处理函数
  # - [MT_Loop, FC344]      主循环调用FC，将这个加入OB1中
  # - [MT_polls_DB, DB881]  用于保存轮询命令数据
  # 可以在对上述内置符号的地址进行更改，只要重新定义就可以了，注意保持名称一致
  - [MT_polls_DB, DB901] # 修改内置DB块 MT_polls_DB 的地址

  # 以下为自定义符号
  # - [JS_flow, FB801]  # JS_Flow 已在 CPU 文档中定义，这里禁止重复定义

list : # modbus TCP 连接列表
  # 第1个连接，
  - comment: 192.168.10.10:502 智能流量计 # 本连接的注释，可省略

    # 十进制连接号，自行指定，但不可重复。省略时，程序会自动生成一个从1开始且不重复的ID。
    # ID: 1
    
    # 背景连接块。不必填写type，会自动指定为 MT_Poll
    DB: [conn_example, DB891]
    
    # modbusTCP 对方IP 必填
    host: [192, 168, 10, 10] 
    
    # modbusTCP 对方端口，必填，注意host:port组合不得重复，否则报错
    port: 502 
    
    # 可直接指定id，建议用下一个local_device配置比较直观
    # local_device_id: 2 
    
    # local_device 用于PN通信的设备，目前允许的值:
    # IM151-8PN/DP
    # CPU31x-2PN/DP
    # CPU314C-2PN/DP
    # IM154-8PN/DP
    # CPU319-3PN/DP
    # CPU315T-3PN/DP
    # CPU317T-3PN/DP
    # CPU317TF-3PN/DP
    # CPU319-3PN/DP_X4
    # CPU317-2PN/DP_X4
    # CPU412-2PN
    # CPU414-3PN/DP
    # CPU416-3PN/DP
    # CPU412-5H_PN/DP_X5
    # CPU414-5H_PN/DP_X5
    # CPU416-5H_PN/DP_X5
    # CPU417-5H_PN/DP_X5
    # CPU410-5H_X8
    # CPU412-5H_PN/DP_X15
    # CPU414-5H_PN/DP_X15
    # CPU416-5H_PN/DP_X15
    # CPU417-5H_PN/DP_X15
    # CPU410-5H_X18
    local_device: CPU31x-2PN/DP 
    
    # 发出查询的时间间隔，可省略，默认为200，单位ms
    # interval_time: 200

    # 自定义查询名称，必填，不可与其它连接的重名。
    polls_name: polls_example 
    
    # 该连接下的轮询定义，至少要有一个查询
    polls: 
    
      # 查询1
      - comment: 垦西1#流量计 # 本查询的注释，可省略
        deivce_ID: 1 # 设备号，即RTU从站地址
        function: 4 # modbus 功能号
        started_addr: 0 # 查询起始地址
        length: 28 # 查询长度
        recv_DB: [Flow01, DB803, JS_flow] # 接收块1
        recv_start: 0 # 接收开始位置

      # 查询2
      - comment: '垦西2#流量计' # 本查询的注释，可省略
        deivce_ID: 2 # 设备号，即RTU从站地址
        function: 4 # modbus 功能号
        started_addr: 0 # 查询起始地址
        length: 28 # 查询长度
        recv_DB: [Flow02, DB802, JS_flow] # 接收块2
        recv_start: 0 # 接收开始位置

      # 查询3
      - comment: '垦西3#流量计' # 本查询的注释，可省略
        deivce_ID: 3 # 设备号，即RTU从站地址
        function: 4 # modbus 功能号
        started_addr: 0 # 查询起始地址
        length: 28 # 查询长度
        recv_DB: [Flow03, DB+, JS_flow] # 接收块2
        recv_start: 0 # 接收开始位置

  # 更多的连接设置，可以依照上方书写，注意对齐，以对齐表示层级
  # - code

options : # 选项，非必需，无需要时可以全部删除或注释掉。

  # 输出文件名，系统自动加后缀。
  # output_file : 'example'
...

---
# 指示本配置为生成 Valve 代码
type: Valve 
CPU: AS1

symbols:
  # 系统已有2个内置符号，其内容自动生成：
  # - [Valve_Proc, FB513]   阀门主处理函数块
  # - [Valve_Loop, FC513]   主调用函数
  # 可以在对上述内置符号的地址进行更改，只要重新定义就可以了，注意保持名称一致

  # 以下为自定义符号
  - [AI11-01, PIW672]
  - [AI11-02, PIW674]
  - [DI01-01, I0.0]
  - [DI01-02, I+]
  - [DI01-03, I+]
  - [DI01-04, I+]
  - [DI01-05, I+]
  - [DI01-06, I+]
  - [DI01-07, I+]
  - [DI01-08, I+]
  - [DO01-01, Q0.0]
  - [DO01-02, Q+]
  - [DO02-01, Q2.0]
  - [DO02-02, Q+]

list :
  # 没有阀位时，AI 可直接设置为断线值S7_AI_MIN_WORD
  # 没有远程信号时，remote可不赋值，其值默认为TRUE，如果要避免其它过程改变它，可以显式赋值为 true
  # 没有故障信号时，error可不赋值，其值默认为FALSE，如果要避免其它过程改变它，可以显式赋值为 false
  # 以下常量可以直接使用
  # S7_ZERO := 0;
  # S7_SPAN := 27648;
  # S7_AI_MIN := -32768;
  # S7_AI_MIN_WORD := W#16#8000;
  # S7_AI_MAX := 32767;
  # S7_AI_MAX_WORD := W#16#7FFF;

  # 阀门1
  - comment: A阀门
    DB: [MGV-1201A, DB111]
    AI: AI11-01
    CP: DI01-01
    OP: DI01-02
    error: DI01-03
    remote: DI01-04
    close_action: DO01-01
    open_action: DO01-02

  # 阀门2
  - comment: B阀门
    DB: [MGV-1201B, DB+]
    AI: S7_AI_MIN_WORD # 没有AI过程值时，可省略或直接赋值断线值，省略时得保证PLC运行时不被改变
    CP: DI01-05
    OP: DI01-06
    error: FALSE
    remote: TRUE
    open_action: DO02-01 # 只能开阀

  - comment: C阀门
    DB: [MGV-1201C, DB+]
    AI: AI11-02
    CP: DI01-07
    OP: DI01-08
    error: FALSE # 没有error过程值时，可省略或赋值FALSE，省略时得保证PLC运行时不被改变
    remote: TRUE # 没有remote过程值时，可省略或赋值TRUE，省略时得保证PLC运行时不被改变
    close_action: DO02-02 # 只能关阀

options : # 选项，非必需，无需要时可以全部删除或注释掉。

  # 输出文件名，系统自动加后缀。
  # output_file : 'example'

...

---
# 指示本配置为生成 Motor 代码
type: Motor
CPU: AS1

symbols:  
  # 系统已有2个内置符号，其内容由本程序自动生成：
  # - [Motor_Proc, FB513]   电机主处理函数
  # - [Motor_Loop, FC513]   主调用函数
  # 可以在对上述内置符号的地址进行更改，只要重新定义就可以了，注意保持名称一致

  # 以下为自定义符号
  - [DI03-01, I4.0]
  - [DI03-02, I+]
  - [DI03-03, I+]
  - [DI03-04, I+]
  - [DI03-05, I+]
  - [DI03-06, I+]
  - [DI03-07, I+]
  - [DI03-08, I+]
  - [DO03-01, Q4.0]
  - [DO03-02, Q+]
  - [DO03-03, Q+]
  - [DO03-04, Q+]

list :
  # 没有远程信号时，enable可不赋值，其值默认为TRUE，如果要避免其它过程改变它，可以显式赋值为 true
  # 没有远程信号时，remote可不赋值，其值默认为TRUE，如果要避免其它过程改变它，可以显式赋值为 true
  # 没有故障信号时，error可不赋值，其值默认为FALSE，如果要避免其它过程改变它，可以显式赋值为 false

  # 最全输入输出
  - comment: A电机
    DB: [PUMP-001A, DB91]          # DB块
    enable: DI03-01                # 允许运行，（比如已蓄能、高压到位等）
    run: DI03-02             # 运行状态
    error: DI03-03                 # 电机故障输入
    remote: DI03-04                # 电机远程就地操作模式
    timer_pulse: M0.5              # 计时脉冲，这里用周期存储器输入1HZ脉冲
    over_time: 1000                # 操作返回延时，超时后撤回信号并指示启停失败
    start_action: DO03-01          # 启电机线路
    stop_action: DO03-02           # 停电机线路
    estop_action: DO03-03          # 紧急停机线路
    run_command: '"HMI-DB".run_cmd'
    stop_command: '"HMI-DB".stop_cmd'
    estop_command: '"HMI-DB".estop_cmd'

  # 常用输入输出
  - comment: B电机
    DB: [PUMP-001B, DB+]
    enable: DI03-05
    run: DI03-06
    error: DI03-07
    remote: DI03-08
    start_action: DO03-05
    stop_action: DO03-06

  # 最少输入输出
  - comment: C电机
    DB: [PUMP-001C, DB+]
    # 省略 error(默认FALSE) remote(默认TRUE) 参数时，必须保证PLC运行时不被改变
    stateless: true       # 指示没有运行状态
    stop_action: DO03-08  # 只能关阀

options : # 选项，非必需，无需要时可以全部删除或注释掉。

  # 输出文件名，系统自动加后缀。
  # output_file : 'example'

...