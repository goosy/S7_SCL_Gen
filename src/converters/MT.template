// 本代码由 S7_SCL_SRC_GEN 自动生成。author: goosy.jo@gmail.com
// 配置文件: {{gcl.file}}
// 摘要: {{gcl.MD5}}
{{if includes}}
{{  includes}}
{{endif}}_
{{for conn in list}}
DATA_BLOCK {{conn.DB.value}} "{{NAME}}" // {{conn.comment}}
BEGIN
    TCON_Parameters.block_length := W#16#40;     //固定为64
    TCON_Parameters.id := W#16#{{conn.ID}};             //连接ID 每个连接必须不一样！
    TCON_Parameters.connection_type := B#16#11;  //连接类型 11H=TCP/IP native, 12H=ISO on TCP, 13H=UDP, 01=TCP/IP comp
    TCON_Parameters.active_est := TRUE;          //是否主动（本功能调用必须为TRUE）
    TCON_Parameters.local_device_id := {{conn.local_device_id}};  //{{conn.device}} {{conn.R}} {{conn.X}}
    TCON_Parameters.local_tsap_id_len := B#16#0;
    TCON_Parameters.rem_subnet_id_len := B#16#0;
    TCON_Parameters.rem_staddr_len := B#16#4;
    TCON_Parameters.rem_tsap_id_len := B#16#2;
    TCON_Parameters.next_staddr_len := B#16#0;
    TCON_Parameters.rem_staddr[1] := B#16#{{conn.IP1}};    //IP1 {{conn.IP[0]}}
    TCON_Parameters.rem_staddr[2] := B#16#{{conn.IP2}};    //IP2 {{conn.IP[1]}}
    TCON_Parameters.rem_staddr[3] := B#16#{{conn.IP3}};    //IP3 {{conn.IP[2]}}
    TCON_Parameters.rem_staddr[4] := B#16#{{conn.IP4}};    //IP4 {{conn.IP[3]}}
    TCON_Parameters.rem_tsap_id[1] := B#16#{{conn.port1}};   //PortH {{conn.port}}
    TCON_Parameters.rem_tsap_id[2] := B#16#{{conn.port2}};   //PortL
    TCON_Parameters.spare := W#16#0;
{{if conn.$interval_time != undefined}}_
    interval_time := {{conn.$interval_time.DINT}};
{{endif}}_
{{if conn.$try_times != undefined}}_
    try_times := {{conn.$try_times.value}},
{{endif}}_
END_DATA_BLOCK
{{endfor}}_

// 轮询定义数据块 "{{POLLS_NAME}}"
DATA_BLOCK "{{POLLS_NAME}}"
TITLE = "轮询定义"
VERSION : 0.0
STRUCT
{{for conn in list}}_
    {{conn.name}} : ARRAY  [0 .. {{conn.polls.length-1}}] OF STRUCT// 轮询列表 {{conn.comment}}
        MBAP_seq : WORD ;               // 事务号 PLC自动填写
        MBAP_protocol : WORD ;          // 必须为0
        MBAP_length : WORD  := W#16#6;  // 长度，对读命令，通常为6
        unit_ID : BYTE ;                // 设备号，不关心的情况下可以填0
        func_code : BYTE ;              // modbus功能号
        address : WORD ;                // 起始地址
        data : WORD ;                   // 长度
        recv_DB : INT ;                 // 接收数据块号
        recv_DBB : INT ;                // 接收数据块起始地址
    END_STRUCT ;
{{endfor // conn}}_
END_STRUCT ;
BEGIN
{{for conn in list}}_
    // --- {{conn.comment}}
{{  for no, poll in conn.polls}}_
    {{conn.name}}[{{no}}].unit_ID := B#16#{{poll.unit_ID}}; // {{poll.comment}}
    {{conn.name}}[{{no}}].func_code := B#16#{{poll.func_code}};
    {{conn.name}}[{{no}}].address := W#16#{{poll.address}};
    {{conn.name}}[{{no}}].data := W#16#{{poll.data}};
    {{conn.name}}[{{no}}].recv_DB := {{poll.recv_DB.block_no}};
    {{conn.name}}[{{no}}].recv_DBB := {{poll.recv_start}};
{{  endfor // poll}}_
{{endfor // conn}}_
END_DATA_BLOCK

// 调用
FUNCTION "{{LOOP_NAME}}" : VOID
{{if loop_begin}}_
{{  loop_begin}}

{{endif}}_
{{for conn in list}}_
// {{conn.comment}}
"{{NAME}}".{{conn.DB.value}} (
{{if conn.interval_time != undefined}}_
    interval_time := {{conn.interval_time.value}},
{{endif}}_
    data := "{{POLLS_NAME}}".{{conn.name}});

{{endfor // conn}}_
// 接收块
{{invoke_code}}
{{if loop_end}}
{{  loop_end}}
{{endif}}_
END_FUNCTION
