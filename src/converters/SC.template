// 本代码由 S7_SCL_SRC_GEN 自动生成。author: goosy.jo@gmail.com
// 配置文件: {{gcl.file}}
// 摘要: {{gcl.MD5}}
{{if includes}}
    {{_includes}}
{{endif}}_

{{ // 轮询块另起一行 }}
// 轮询DB块，含485调度指令和发送数据
DATA_BLOCK "{{POLLS_NAME}}"
STRUCT
{{for module in list}}_
    {{module.name}} : ARRAY [0 .. {{module.polls.length-1}}] OF STRUCT //{{module.comment}} 轮询命令数据
        enable: BOOL := TRUE; // 允许本poll通讯
        next: BOOL; // false为结尾，否则有下一个
        modbusFlag : BOOL; // 是否为modbus协议
        status: WORD;    // 预留
        send_DB : INT; // 发送DB，为0时为本块
        send_DBB : INT; // 发送DB起始地址
        send_length : INT; // 发送长度
        recv_DB : INT; // 接收DB
        recv_DBB : INT; // 接收DB起始地址
        waitCount : INT; // 发送等待次数
    END_STRUCT;
{{endfor // module}}_
{{poll_index = stepper(0, 1)}}_
{{for module in list}}_
    {{_for poll in module.polls}}_
        {{_if !poll.extra_send_DB}}_
    poll_{{poll_index.value}}_data : STRUCT
            {{_if poll.send_data // ----通用发送}}_
        send_data : ARRAY  [0 .. {{poll.send_data.length-1}}] OF BYTE;    //发送数据
            {{_else // ----modbus 发送}}_
        unit_ID : BYTE;    //子站地址
        func_code : BYTE;    //modbus 功能号
        address : WORD;    //起始地址
        data : WORD;    //数据，对 01 02 03 04 功能码来说为长度，对 05 06 功能码来说为写入值
        CRC : WORD;    //检验字
            {{_endif // 发送数据结束}}_
    END_STRUCT;
        {{_endif // extra_send_DB}}_
        {{_poll_index.next()}}_
    {{_endfor // poll}}_
{{endfor // module}}_
END_STRUCT;
BEGIN
{{poll_index = stepper(0, 1)}}_
{{for module in list}}
    // --- {{module.comment}} 轮询数据
    {{_for no, poll in module.polls}}
    // poll {{poll_index.value}}: {{poll.comment}}
    {{module.name}}[{{no}}].next := {{no + 1 == module.polls.length ? 'FALSE' : 'TRUE'}};
    {{module.name}}[{{no}}].modbusFlag := {{poll.is_modbus ? 'TRUE' : 'FALSE'}};
    {{module.name}}[{{no}}].send_DB := {{poll.send_DB.block_no}};
    {{module.name}}[{{no}}].send_DBB := {{poll.send_start}};
    {{module.name}}[{{no}}].send_length := {{poll.send_length}};
    {{module.name}}[{{no}}].recv_DB := {{poll.recv_DB.block_no}};
    {{module.name}}[{{no}}].recv_DBB := {{poll.recv_start}};
        {{_if !poll.extra_send_DB //非外部数据块}}_
    // send data
            {{_if poll.send_data}}_
                {{_for index, databyte in poll.send_data}}_
    poll_{{poll_index.value}}_data.send_data[{{index}}] := B#16#{{databyte}};    //发送数据{{index}}
                {{_endfor}}_
            {{_else}}_
    poll_{{poll_index.value}}_data.unit_ID := {{poll.unit_ID.byteHEX}};
    poll_{{poll_index.value}}_data.func_code := {{poll.func_code.byteHEX}};
    poll_{{poll_index.value}}_data.address := {{poll.started_addr.wordHEX}};
    poll_{{poll_index.value}}_data.data := {{poll.data.wordHEX}};
            {{_endif // send_data}}_
        {{_endif // extra_send_DB ---- 发送数据结束}}_
        {{_poll_index.next()}}_
    {{_endfor // poll}}_
{{endfor // module}}_
END_DATA_BLOCK

// 主调用
FUNCTION "{{LOOP_NAME}}" : VOID
{{if loop_begin}}_
{{  loop_begin}}
{{endif}}_

{{for no, module in list}}
// {{no+1}}. {{module.model}} {{module.comment}}
"{{if module.model == 'CP341'}}{{CP341_NAME}}{{else}}{{CP340_NAME}}{{endif}}".{{module.DB.value}}(
    {{_if module.customREQ}}_
    customTrigger := TRUE,
    REQ           := {{module.customREQ.value}},
    {{_endif}}_
    Laddr         := {{module.module.block_no}},  // CP模块地址
    DATA          := "{{POLLS_NAME}}".{{module.name}});
{{endfor // module}}
// 发送接收块
{{invoke_code}}_

{{if loop_end}}
{{  loop_end}}_
{{endif}}
END_FUNCTION
