// This code is automatically generated by ./build.js
// The ./src/converters directory contains converter files,
// and the file name must be in the format of converter_<feature_name>.js.
// The converter file defines the currently supported conversion functions
//
// Every converter must implement
// - function is_feature(name: string): boolean
//   Determine whether it is the current conversion document
// - function gen(area: Area): ConverItem[]
//   Generate a conversion list, the list can be empty
//   Each item in the list is a conversion object. In fact, this list is area.list
//   Return a conversion list, each ConverItem is { rules, template_file }
//   rules is a list of conversion rules, which can also be considered as a list of variables, used for expression replacement in templates.
//   rules do not need to include some variables provided by default
//   template_file is the file name of the converted template file
// - function gen_copy_list(area: Area)
//   Generate a copy list, the list can be empty
// - function initialize_list(area: Area)
//   Construct transformation items during the first pass of scanning the document
//   Mainly converts each item of area.list from YAMLNode into a data object that can be used by the template
// - template_file
//   Convert template file, the file name can be customized, it is recommended to use `<feature_name>.template`
//   When using suggested filenames, template_file can be omitted for each ConverItem returned by the gen function
//   Otherwise the template_file value must be set in ConverItem
//
// Optional implementation for each converter
// - function build_list(area: Area)
//   Complete the conversion items when scanning the document for the second time
// - <feature_name>.yaml
//   This yaml file describes the built-in symbol list of this conversion type. The file is placed in the same folder as .js
//   If the converter references a symbol from other libraries, please ensure that the symbol is defined in `./src/convertersCPU.yaml`

// import all converters
{{for feature in features}}_
import * as {{feature}} from './converters/converter_{{feature}}.js';
{{endfor}}_

const supported_features = [
{{for feature in features}}_
    '{{feature}}',
{{endfor}}_
];

const converter = {
{{for feature in features}}_
    {{feature}},
{{endfor}}_
}

const templates = {};
{{for name, template in templates}}_
templates['{{name}}'] = `{{template}}`;
{{endfor}}_

export { supported_features, converter, templates };
