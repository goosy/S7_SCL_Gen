// 本代码为 ./build.js 自动生成
// ./src/converters 目录下为转换器文件，文件名称必须是 converter_<feature_name>.js 的格式。
// 转换器文件定义了目前支持的转换功能
//
// 每个转换器必须实现
// - function is_feature(name: string): boolean
//       判断是否为当前转换文档
// - function gen(area: Area): ConverItem[]
//       生成转换列表，列表可为空
//       列表的每一项是一个转换对象，事实上这个列表就是 area.list
//       返回一个转换列表，每一项ConverItem为 { rules, template }
// - function gen_copy_list(area: Area)
//       生成复制列表，列表可为空
// - function initialize_list(area: Area)
//       第一遍扫描文档时构建转换项
//       主要是将 area.list 的每一项由 YAMLNode 转换为可供模板使用的数据对象
//
// 每个转换器可选实现
//   function build_list(area: Area)
//       第二遍扫描文档时完善转换项
//   <feature_name>.yaml
//       该yaml文件描述该转换类型的内置符号列表，文件放在.js同一文件夹下
//       如果转换器引用了其它库里的符号，请保证在 `./src/convertersCPU.yaml` 中定义了该符号

// 引入所有的转换器
{{for feature,converter in converters}}_
import * as {{feature}} from './converters/converter_{{feature}}.js';
{{endfor // converter}}_

import { IntHashList } from './s7data.js';
import { S7SymbolEmitter } from './symbols.js';

/**
 * @typedef  {object} Area
 * @property {Document} document - 文档
 * @property {Array} list - 列表
 * @property {string|string[]} includes - 包括列表
 * @property {string[]} files - 文件列表
 * @property {object} options - 选项
 */

/**
 * @typedef {Object} NonSymbol
 * @property {string} value - 符号表达式
 * @property {string} desc - 错误描述
 */

class ICPU{
    /** @type {string} */
    name;                             // CPU 名称
    /** @type {string} */
    platform;                         // 由CPU文档设置，默认 'step7'
    /** @type {string} */
    device;                           // 由CPU文档设置
{{for cat in supported_category}}_
    /** @type {Area|null} */
    {{pad_right(cat.feature + ';', 34)}}// 由 {{cat.feature}} 文档设置
{{endfor}}_

    /** @type {string} */
    output_dir;                       // 输出文件夹

    /** @type {S7SymbolEmitter} */
    symbols = new S7SymbolEmitter();  // 符号调度中心
    /** @type {Promise.<S7Symbol>[]} */
    asnyc_symbols = [];               // 该CPU的异步符号列表
    /** @type {NonSymbol[]} */
    non_symbols = [];                 // 该CPU的非符号列表.push({ value, desc: s7_expr_desc });

    /** @type {IntHashList} */
    conn_ID_list = new IntHashList(16); // 已用连接ID列表
    /** @type {Object.<string, number>} */
    conn_host_list = {};             // 已用的连接地址列表
    /**
     * @type { {
     *   tagname: string,
     *   location: string,
     *   event: string,
     *   PV1: string
     * } }
     */
    alarms_list = [];                // 该CPU的报警列表

    constructor(name){
        this.name = name;
        this.output_dir = name;
    }
}

const supported_features = [
{{for cat in supported_category}}_
    '{{cat.feature}}',
{{endfor}}_
];
const converter = {
{{for feature,converter in converters}}_
    {{feature}}, 
{{endfor // converter}}_
}

export { ICPU as CPU, supported_features, converter };
